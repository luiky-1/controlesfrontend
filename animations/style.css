.card{
  background: white;
  border-radius:2px;
  box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);
  display: inline-block;
  margin: 1em;
  width: 300px;
  height: 300px;
  background-color: #f44336;
}

.rippleIn, .rippleOut{/*efecto de entrada y efecto de salida*/
  animation: rippleIn 225ms;
  animation-fill-mode: forwards;
  animation-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);
}

.rippleOut{
  animation-direction: reverse;/*logico la direccion es al reves de rippleIn*/
}

.zoomIn, .zoomOut{
  animation: zoomIn 225ms;
  animation-fill-mode: forwards;
  animation-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);
}

.zoomOut{
  animation-direction: reverse;
}

.rotateIn, .rotateOut{
  animation: rotateIn 225ms;
  animation-fill-mode: forwards;/* para q conserve el estado final, el 100% de la animacion rippleIn*/
  animation-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);
}

.rotateOut{
  animation-direction: reverse;
}

@keyframes zoomIn{ /*las animaciones se declaran con @keyframes + nombre animacion*/
  0%{               /*genera la animacion con la opacidad*/
    transform: scale(0);
    opacity: 0;
  }
  40%{
    opacity: 0.25;
  }
  100%{
    transform: scale(1);
    opacity: 1;
  }
}


@keyframes rippleIn{/*se genera la animacion con el borderradius*/
  0%{
    transform: scale(0);/*se escribe as√≠ pq scale es una funcion*/
    border-radius: 50%;
    opacity: 0;
  }
  40%{
    border-radius: 50%;
  }
  100%{
    transform: scale(1);
    opacity: 1;
    border-radius: inherit;/*hereda el diamtro de otra propiedad, en este caso 2px*/
  }
}

@keyframes rotateIn{/*otro efecto es el de entrar o slair con rotacion*/
  0%{
    transform: scaleY(0) rotateX(180deg);/*para especificar mas de una transformacion en css se separa con un espacio*/
    opacity: 0;
  }
  100%{
    transform: scaleY(1) rotateX()0deg;/*se puede escalar en solo una direccion. si queremos que solo se mueva en el eje X o Y */
    opacity: 1;
  }
}
